// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AppierAds
import AdSupport
import AppTrackingTransparency
import CoreTelephony
import Foundation
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import os
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class APRAds : ObjectiveC.NSObject {
  @objc public static var shared: AppierAds.APRAds
  @objc final public var configuration: AppierAds.APRAdsConfiguraiton
  @objc final public let version: Swift.String
  @objc final public func start(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AppierBaseAd : ObjectiveC.NSObject {
  @objc public func set(extras: AppierAds.APRAdExtras?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class APRBannerAd : AppierAds.AppierBaseAd {
  @objc weak final public var delegate: AppierAds.APRBannerAdDelegate?
  @objc public init(adUnitId: AppierAds.APRAdUnitIdentifier)
  @objc final public func getWebView() -> UIKit.UIWebView?
  @objc final public func loadAd()
  @objc deinit
}
extension AppierAds.APRBannerAd : UIKit.UIWebViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: UIKit.UIWebView, shouldStartLoadWith request: Foundation.URLRequest, navigationType: UIKit.UIWebView.NavigationType) -> Swift.Bool
}
@objc public protocol APRBannerAdDelegate {
  @objc func onAdLoaded(bannerAd: AppierAds.APRBannerAd)
  @objc func onAdLoadFailed(bannerAd: AppierAds.APRBannerAd, error: AppierAds.APRError)
  @objc func onViewClick(bannerAd: AppierAds.APRBannerAd)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class APRBannerAdView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: AppierAds.APRBannerAdViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) convenience public init(adUnitId: AppierAds.APRAdUnitIdentifier)
  @objc @_Concurrency.MainActor(unsafe) public init(adUnitId: AppierAds.APRAdUnitIdentifier, size: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) final public func set(adUnitId: AppierAds.APRAdUnitIdentifier)
  @objc @_Concurrency.MainActor(unsafe) final public func set(extras: AppierAds.APRAdExtras)
  @objc @_Concurrency.MainActor(unsafe) final public func loadAd()
  @objc deinit
}
extension AppierAds.APRBannerAdView : AppierAds.APRBannerAdDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func onAdLoadFailed(bannerAd: AppierAds.APRBannerAd, error: AppierAds.APRError)
  @_Concurrency.MainActor(unsafe) @objc final public func onViewClick(bannerAd: AppierAds.APRBannerAd)
  @_Concurrency.MainActor(unsafe) @objc final public func onAdLoaded(bannerAd: AppierAds.APRBannerAd)
}
@objc public protocol APRBannerAdViewDelegate {
  @objc func adViewDidLoadAd(view: AppierAds.APRBannerAdView, adSize: CoreGraphics.CGSize)
  @objc func adViewDidFailToLoadAdWithError(view: AppierAds.APRBannerAdView, error: AppierAds.APRError)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class APRNativeAd : AppierAds.AppierBaseAd {
  @objc weak public var delegate: AppierAds.NativeAdDelegate?
  @objc public var title: Swift.String? {
    @objc get
  }
  @objc public var mainText: Swift.String? {
    @objc get
  }
  @objc public var callToAction: Swift.String? {
    @objc get
  }
  @objc public var iconImage: UIKit.UIImage? {
    @objc get
  }
  @objc public var mainImage: UIKit.UIImage? {
    @objc get
  }
  @objc public var privacyInformationImage: UIKit.UIImage? {
    @objc get
  }
  public var clickDestinationUrl: Foundation.URL? {
    get
  }
  public var privacyInformationDestinationUrl: Foundation.URL? {
    get
  }
  public var clickedTrackingUrls: [Foundation.URL]? {
    get
  }
  @objc convenience public init(adUnitId: AppierAds.APRAdUnitIdentifier)
  @objc public func set(renderer: AppierAds.APRNativeAdRendering)
  @objc public func loadAd()
  public func recordImpression()
  @objc public func render()
  @objc public func clickAdView(sender: Any? = nil)
  @objc public func clickPrivacyInformationView(sender: Any? = nil)
  public func untrackAdView()
  @objc deinit
}
@objc public protocol NativeAdDelegate {
  @objc func onAdLoaded(nativeAd: AppierAds.APRNativeAd)
  @objc func onAdLoadedFailed(nativeAd: AppierAds.APRNativeAd, error: AppierAds.APRError)
  @objc func onAdImpressionRecorded(nativeAd: AppierAds.APRNativeAd)
  @objc func onAdImpressionRecordedFailed(nativeAd: AppierAds.APRNativeAd, error: AppierAds.APRError)
  @objc func onAdClickedRecorded(nativeAd: AppierAds.APRNativeAd)
  @objc func onAdClickedRecordedFailed(nativeAd: AppierAds.APRNativeAd, error: AppierAds.APRError)
}
@objc public protocol APRNativeAdRendering {
  @objc var nativeAdTitleLabel: UIKit.UILabel? { get }
  @objc var nativeAdMainTextLabel: UIKit.UILabel? { get }
  @objc var nativeAdCallToActionLabel: UIKit.UILabel? { get }
  @objc var nativeAdIconImageView: UIKit.UIImageView? { get }
  @objc var nativeAdMainImageView: UIKit.UIImageView? { get }
  @objc var nativeAdPrivacyInformationIconView: UIKit.UIView? { get }
  @objc func getNativeAdClickableViews() -> [UIKit.UIView]
}
@_inheritsConvenienceInitializers @objc public class APRAdExtras : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  @objc public func set(key: AppierAds.APRDataKey, value: Any)
  @objc public func get(key: AppierAds.APRDataKey) -> Any?
  @objc deinit
}
@objc public enum APRDataKey : Swift.Int {
  case adUnitId
  case zoneId
  case adWidth
  case adHeight
  case adOrientation
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class APRAdUnitId : ObjectiveC.NSObject, AppierAds.APRAdUnitIdentifier {
  @objc public init(_ adUnitId: Swift.String)
  @objc final public func get() -> Swift.String
  @objc final public func build() -> Swift.String
  @objc deinit
}
@objc public protocol APRAdUnitIdentifier {
  @objc func get() -> Swift.String
  @objc func build() -> Swift.String
}
@objc public enum APRBrowserAgent : Swift.Int {
  case native
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum APRTestMode : Swift.Int, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  case none = 0, bid, noBid, bidWithStoreView
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class APRAdsConfiguraiton : ObjectiveC.NSObject {
  @objc final public var testMode: AppierAds.APRTestMode
  @objc final public var browserAgent: AppierAds.APRBrowserAgent
  @objc final public var coppaApplies: Swift.Bool
  @objc final public var gdprApplies: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var forceGDPRApplies: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var sourceAppId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class APRError : ObjectiveC.NSObject, Swift.Error {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public init(type: AppierAds.APRErrorType)
  @objc deinit
}
@objc public enum APRErrorType : Swift.Int {
  case noFill
  case zoneIdError
  case adUnitIdError
  case networkError
  case badRequest
  case internalServerError
  case invalidJson
  case webViewError
  case videoPlaybackError
  case videoFileError
  case fetchImageError
  case unknownError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NetworkStatus : Swift.String {
  case notReachable
  case reachableViaWiFi
  case reachableViaCellularUnknownGeneration
  case reachableViaCellular2G
  case reachableViaCellular3G
  case reachableViaCellular4G
  case reachableViaCellular5G
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class APRLogger : ObjectiveC.NSObject {
  @objc final public let category: Swift.String
  @objc public var enable: Swift.Bool {
    @objc get
  }
  public init(category: Swift.String)
  public func debug(_ message: AppierAds.LogMessage)
  public func info(_ message: AppierAds.LogMessage)
  public func warning(_ message: AppierAds.LogMessage)
  public func error(_ message: AppierAds.LogMessage)
  @objc deinit
}
public struct LogMessage {
}
extension AppierAds.LogMessage : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AppierAds.LogMessage : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AppierAds.LogMessage : Swift.ExpressibleByStringInterpolation {
  public init(stringInterpolation: AppierAds.LogMessage.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.StringLiteralType)
    public mutating func appendInterpolation(_ object: Any?)
    public typealias StringLiteralType = Swift.StringLiteralType
  }
}
extension AppierAds.APRDataKey : Swift.Equatable {}
extension AppierAds.APRDataKey : Swift.Hashable {}
extension AppierAds.APRDataKey : Swift.RawRepresentable {}
extension AppierAds.APRBrowserAgent : Swift.Equatable {}
extension AppierAds.APRBrowserAgent : Swift.Hashable {}
extension AppierAds.APRBrowserAgent : Swift.RawRepresentable {}
extension AppierAds.APRTestMode : Swift.Equatable {}
extension AppierAds.APRTestMode : Swift.Hashable {}
extension AppierAds.APRTestMode : Swift.RawRepresentable {}
extension AppierAds.APRErrorType : Swift.Equatable {}
extension AppierAds.APRErrorType : Swift.Hashable {}
extension AppierAds.APRErrorType : Swift.RawRepresentable {}
extension AppierAds.NetworkStatus : Swift.Equatable {}
extension AppierAds.NetworkStatus : Swift.Hashable {}
extension AppierAds.NetworkStatus : Swift.RawRepresentable {}
